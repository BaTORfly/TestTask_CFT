## Тестовое задание от ЦФТ на курс Java.
#### Биликтуев Батор Эрдэмович, регистрационный номер - SHIFT-66245

### Описание задачи 
#### Утилита фильтрации содержимого файлов

При запуске утилиты в командной строке подается несколько файлов, содержащих в
перемешку целые числа, строки и вещественные числа. В качестве разделителя
используется перевод строки. Строки из файлов читаются по очереди в соответствии с их
перечислением в командной строке.

Задача утилиты записать разные типы данных в разные файлы. Целые числа в один
выходной файл, вещественные в другой, строки в третий. По умолчанию файлы с
результатами располагаются в текущей папке с именами integers.txt, floats.txt, strings.txt.
Дополнительно с помощью опции -o нужно уметь задавать путь для результатов. Опция -p
задает префикс имен выходных файлов. Например -o /some/path -p result_ задают вывод в
файлы /some/path/result_integers.txt, /some/path/result_strings.txt и тд.

По умолчанию файлы результатов перезаписываются. С помощью опции -a можно задать
режим добавления в существующие файлы.

Файлы с результатами должны создаваться по мере необходимости. Если какого-то типа
данных во входящих файлах нет, то и создавать исходящий файл, который будет заведомо
пустым, не нужно.

В процессе фильтрации данных необходимо собирать статистику по каждому типу данных.
Статистика должна поддерживаться двух видов: краткая и полная. Выбор статистики
производится опциями -s и -f соответственно. Краткая статистика содержит только
количество элементов записанных в исходящие файлы. Полная статистика для чисел
дополнительно содержит минимальное и максимальное значения, сумма и среднее.
Полная статистика для строк, помимо их количества, содержит также размер самой
короткой строки и самой длинной.

Статистику по каждому типу отфильтрованных данных утилита должна вывести в консоль. 

Все возможные виды ошибок должны быть обработаны. Программа не должна «падать».
Если после ошибки продолжить выполнение невозможно, программа должна сообщить об
этом пользователю с указанием причины неудачи. Частичная обработка при наличии
ошибок более предпочтительна чем останов программы. Код программы должен быть
«чистым». 

Для реализации необходимо использовать язык программирования Java, допустимо
использовать стандартные системы сборки проекта (Maven, Gradle)
Решение принимается в виде исходного кода проекта.

К решению должна прилагаться инструкция по запуску. В ней можно отображать
особенности реализации, не уточненные в задании. В частности, в инструкции необходимо
указывать:
<ul>
  <li>версию Java;</li>
  <li>при использовании системы сборки – указать систему сборки и ее версию;</li>
  <li>при использовании сторонних библиотек указать их название и версию, а также
приложить ссылки на такие библиотеки (можно в формате зависимостей системы
сборки).</li>
</ul>

#### Пример входного файла in1.txt
Lorem ipsum dolor sit amet <br/>
45 <br/>
Пример <br/>
3.1415 <br/>
consectetur adipiscing <br/>
-0.001 <br/>
тестовое задание <br/>
100500<br/>

#### Пример входного файла in2.txt
Нормальная форма числа с плавающей запятой <br/>
1.528535047E-25 <br/>
Long <br/>
1234567890123456789 <br/>

#### Пример запуска утилиты
java -jar util.jar -s -a -p sample- in1.txt in2.txt

#### sample-integers.txt
45 <br/>
1234567890123456789 <br/>
100500 <br/>

#### sample-floats.txt
1.528535047E-25 <br/>
3.1415 <br/>
-0.001 <br/>

#### sample-strings.txt
Lorem ipsum dolor sit amet <br/>
Нормальная форма числа с плавающей запятой <br/>
Пример <br/>
Long <br/>
consectetur adipiscing <br/>
тестовое задание <br/>

## Сборка и запуск
Необходим Maven и 17 версия JDK. Подробнее версии указаны в изображении ниже:
![img.png](readme_imgs/img.png)
#### Дальнейшие действия производим в папке проекта <br>
Компиляция:
```
mvn compile
```
Пример правильного запуска утилиты:
```
mvn exec:java -Dexec.args="-f -p result_ in1.txt in2.txt"
```

## Реализация
### Сторонние библиотеки

- JCommander. Исппользуется для обработки и валидации параметров передающихся
в командной строке. 
```xml
    <dependency>
      <groupId>com.beust</groupId>
      <artifactId>jcommander</artifactId>
      <version>1.82</version>
    </dependency>
```

### Классы

- Main. Основной класс, содержащий в себе точку запуска утилиты;
- DataFilter. Класс, содержащий в себе всю основную логику утилиты 
(обработка входящих параметров, фильтрация файлов со всеми условиями);
- StatisticsCollector. Коллектор статистики, отвечающий за сбор, обновление и вывод
статистики;
- PositiveOutputPath. Класс-валидатор для параметра -o;
- PositiveInputFile. Класс-валидатор для входных файлов;
- ExclusiveStatsValidator. Класс-валидатор, проверяющий отсутствие взаимоисключаемых
параметров -s и -f.

